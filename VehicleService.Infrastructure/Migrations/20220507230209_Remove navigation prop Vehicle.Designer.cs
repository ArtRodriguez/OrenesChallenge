// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VehicleService.Infrastructure;

namespace VehicleService.Infrastructure.Migrations
{
    [DbContext(typeof(VehicleServiceContext))]
    [Migration("20220507230209_Remove navigation prop Vehicle")]
    partial class RemovenavigationpropVehicle
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VehicleService.Domain.AggregatesModel.OrderAggregate.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrackingCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrackingCode")
                        .IsUnique();

                    b.HasIndex("VehicleId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("VehicleService.Domain.AggregatesModel.VehicleAggregate.HistoricalLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("HistoricalLocations");
                });

            modelBuilder.Entity("VehicleService.Domain.AggregatesModel.VehicleAggregate.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LicensePlate")
                        .IsUnique();

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 5, 8, 1, 2, 9, 408, DateTimeKind.Local).AddTicks(3142),
                            Latitude = 0.0,
                            LicensePlate = "0001",
                            Longitude = 0.0,
                            UpdatedAt = new DateTime(2022, 5, 8, 1, 2, 9, 410, DateTimeKind.Local).AddTicks(5940)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 5, 8, 1, 2, 9, 411, DateTimeKind.Local).AddTicks(5356),
                            Latitude = 0.0,
                            LicensePlate = "0002",
                            Longitude = 0.0,
                            UpdatedAt = new DateTime(2022, 5, 8, 1, 2, 9, 411, DateTimeKind.Local).AddTicks(5374)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 5, 8, 1, 2, 9, 411, DateTimeKind.Local).AddTicks(5526),
                            Latitude = 0.0,
                            LicensePlate = "0003",
                            Longitude = 0.0,
                            UpdatedAt = new DateTime(2022, 5, 8, 1, 2, 9, 411, DateTimeKind.Local).AddTicks(5531)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 5, 8, 1, 2, 9, 411, DateTimeKind.Local).AddTicks(5560),
                            Latitude = 0.0,
                            LicensePlate = "0004",
                            Longitude = 0.0,
                            UpdatedAt = new DateTime(2022, 5, 8, 1, 2, 9, 411, DateTimeKind.Local).AddTicks(5563)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 5, 8, 1, 2, 9, 411, DateTimeKind.Local).AddTicks(5580),
                            Latitude = 0.0,
                            LicensePlate = "0005",
                            Longitude = 0.0,
                            UpdatedAt = new DateTime(2022, 5, 8, 1, 2, 9, 411, DateTimeKind.Local).AddTicks(5583)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2022, 5, 8, 1, 2, 9, 411, DateTimeKind.Local).AddTicks(5605),
                            Latitude = 0.0,
                            LicensePlate = "0006",
                            Longitude = 0.0,
                            UpdatedAt = new DateTime(2022, 5, 8, 1, 2, 9, 411, DateTimeKind.Local).AddTicks(5608)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2022, 5, 8, 1, 2, 9, 411, DateTimeKind.Local).AddTicks(5667),
                            Latitude = 0.0,
                            LicensePlate = "0007",
                            Longitude = 0.0,
                            UpdatedAt = new DateTime(2022, 5, 8, 1, 2, 9, 411, DateTimeKind.Local).AddTicks(5670)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2022, 5, 8, 1, 2, 9, 411, DateTimeKind.Local).AddTicks(5690),
                            Latitude = 0.0,
                            LicensePlate = "0008",
                            Longitude = 0.0,
                            UpdatedAt = new DateTime(2022, 5, 8, 1, 2, 9, 411, DateTimeKind.Local).AddTicks(5693)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2022, 5, 8, 1, 2, 9, 411, DateTimeKind.Local).AddTicks(5709),
                            Latitude = 0.0,
                            LicensePlate = "0009",
                            Longitude = 0.0,
                            UpdatedAt = new DateTime(2022, 5, 8, 1, 2, 9, 411, DateTimeKind.Local).AddTicks(5711)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2022, 5, 8, 1, 2, 9, 411, DateTimeKind.Local).AddTicks(5729),
                            Latitude = 0.0,
                            LicensePlate = "0010",
                            Longitude = 0.0,
                            UpdatedAt = new DateTime(2022, 5, 8, 1, 2, 9, 411, DateTimeKind.Local).AddTicks(5732)
                        });
                });

            modelBuilder.Entity("VehicleService.Domain.AggregatesModel.OrderAggregate.Order", b =>
                {
                    b.HasOne("VehicleService.Domain.AggregatesModel.VehicleAggregate.Vehicle", null)
                        .WithMany("Orders")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VehicleService.Domain.AggregatesModel.VehicleAggregate.HistoricalLocation", b =>
                {
                    b.HasOne("VehicleService.Domain.AggregatesModel.VehicleAggregate.Vehicle", null)
                        .WithMany("HistoricalLocations")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VehicleService.Domain.AggregatesModel.VehicleAggregate.Vehicle", b =>
                {
                    b.Navigation("HistoricalLocations");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
